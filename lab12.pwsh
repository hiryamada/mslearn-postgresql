################################
# sign in to Azure using Azure CLI
################################
# specify username and password directly
az login -u '' -p ''
# or sign in interactively (web browser will open)
# az login

################################
# download source codes
################################
$url = "https://github.com/hiryamada/mslearn-postgresql/archive/refs/heads/main.zip"
$zipPath = 'main.zip'
(New-Object System.Net.WebClient).DownloadFile($url, $zipPath)
Expand-Archive -LiteralPath $zipPath

################################
# create resource group
################################
$REGION = "eastus"
$RG_NAME = "rg-learn-postgresql-ai-$REGION"
az group create --name $RG_NAME --location $REGION

################################
# generate password for postgres admin user
################################
$env:PGPASSWORD = -join ((48..57 + 65..90 + 97..122) | Get-Random -Count 18 | ForEach-Object {[char]$_})  

################################
# deploy Azure resources
# (this will take approximately 5 minutes to complete)
################################
az deployment group create -g $RG_NAME --template-file .\main\mslearn-postgresql-main\Allfiles\Labs\Shared\deploy.bicep --parameters restore=false adminLogin=pgAdmin adminLoginPassword=$env:PGPASSWORD

################################
# define a function to send a SQL query using psql
################################
$SERVER_FQDN = az postgres flexible-server list --query '[].fullyQualifiedDomainName' -o tsv
Function ExecuteQuery { param([string]$Query) psql -U pgAdmin -h $SERVER_FQDN -d rentals -c $Query }

################################
# create tables
################################

ExecuteQuery "CREATE TABLE listings (id int, name varchar(100), description text, property_type varchar(25), room_type varchar(30), price numeric, weekly_price numeric)"  
ExecuteQuery "CREATE TABLE reviews (id int, listing_id int, date date, comments text)"  

################################
# copy data into tables
################################
ExecuteQuery "\COPY listings FROM 'main/mslearn-postgresql-main/Allfiles/Labs/Shared/listings.csv' CSV HEADER"
ExecuteQuery "\COPY reviews FROM 'main/mslearn-postgresql-main/Allfiles/Labs/Shared/reviews.csv' CSV HEADER"

################################
# enable azure_ai extension
################################
ExecuteQuery "CREATE EXTENSION IF NOT EXISTS azure_ai"

################################
# get Azure AI Services resource info
################################
$AOAI_NAME = az cognitiveservices account list --query '[?kind==`AIServices`].name' -o tsv
$LANG_ENDPOINT = (az cognitiveservices account show -n $AOAI_NAME -g $RG_NAME --query 'properties.endpoint' -o tsv)
$AOAI_ENDPOINT = $LANG_ENDPOINT -replace 'cognitiveservices', 'openai'
$AOAI_KEY = az cognitiveservices account keys list -n $AOAI_NAME -g $RG_NAME --query 'key1' -o tsv

################################
# set endpoint and key for Azure OpenAI
################################
ExecuteQuery "SELECT azure_ai.set_setting('azure_openai.endpoint', '$AOAI_ENDPOINT')"
ExecuteQuery "SELECT azure_ai.set_setting('azure_openai.subscription_key', '$AOAI_KEY')"

################################
# create embeddings
################################
ExecuteQuery "SELECT id, name, azure_openai.create_embeddings('embedding', description) AS vector FROM listings LIMIT 1"

################################
# set endpoint and key for Azure AI Language
################################
ExecuteQuery "SELECT azure_ai.set_setting('azure_cognitive.endpoint', '$LANG_ENDPOINT')"
ExecuteQuery "SELECT azure_ai.set_setting('azure_cognitive.subscription_key', '$AOAI_KEY')"

################################
# analyze sentiment
################################
ExecuteQuery "SELECT id, comments, azure_cognitive.analyze_sentiment(comments, 'en') AS sentiment FROM reviews WHERE id in (1, 3)"

